{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Business/Business.js","components/BusinessList/BusinessList.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["sortByOptions","SearchBar","props","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","this","setState","event","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","key","className","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","React","Component","Business","src","business","imageSrc","alt","name","address","city","zipCode","category","toUpperCase","rating","reviewCount","BusinessList","businesses","id","Yelp","search","fetch","headers","Authorization","process","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adc0ac79.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst sortByOptions = {\r\n  'Best Match': 'best_match',\r\n  'Highest Rated': 'rating',\r\n  'Most Reviewed': 'review_count'\r\n};\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: '',\r\n      location: '',\r\n      sortBy: 'best_match'\r\n    };\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  getSortByClass(sortByOption) {\r\n    if (sortByOption === this.state.sortBy) {\r\n      return 'active';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  handleSortByChange(sortByOption) {\r\n    this.setState({ sortBy: sortByOption });\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n\r\n  handleLocationChange(event) {\r\n    this.setState({ location: event.target.value });\r\n  }\r\n\r\n  handleSearch(event) {\r\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    event.preventDefault();\r\n  }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(sortByOptions).map(sortByOption => {\r\n      let sortByOptionValue = sortByOptions[sortByOption];\r\n      return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\r\n          <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a href=\"www.#.com\" onClick={this.handleSearch}>Let's Go</a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Business\">\r\n        <div className=\"image-container\">\r\n          <img src={this.props.business.imageSrc} alt='' />\r\n        </div>\r\n        <h2>{this.props.business.name}</h2>\r\n        <div className=\"Business-information\">\r\n          <div className=\"Business-address\">\r\n            <p>{this.props.business.address}</p>\r\n            <p>{this.props.business.city}</p>\r\n            <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n          </div>\r\n          <div className=\"Business-reviews\">\r\n            <h3>{this.props.business.category.toUpperCase()}</h3>\r\n            <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n            <p>{this.props.business.reviewCount} reviews</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"BusinessList\">\r\n        {\r\n          this.props.businesses.map(business => {\r\n            return <Business key={business.id} business={business} />;\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BusinessList;","const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${apiKey}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => {\r\n          // console.log(business);\r\n          return {\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address1,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}